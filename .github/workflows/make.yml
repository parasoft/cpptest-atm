# This is a basic workflow to help you get started with the Run C/C++test action for Make-based project.
name: C/C++test with Make

on:
  # Trigger the workflow on push or pull request events but only for the master branch.
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allow running this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Check out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v2
    
    # Build your Make project - using 'cpptesttrace' to collect input data for the code analysis.
    # Be sure 'cpptesttrace' is available on $PATH.
    - name: Build project
      run: cpptesttrace make clean all

    # Run code analysis with C/C++test.
    - name: Run C/C++test
      # Use dedicated 'run-cpptest-action' GitHub Action.
      uses: parasoft/run-cpptest-action@0.2.1-alpha
      with:
        additionalParams: '-localsettings cpptestcli.properties'
        commandLinePattern: '${cpptestcli} -data ../wrk -config "${testConfig}" -report "${reportDir}" -bdf "${input}" ${additionalParams}'

    # Upload analysis results in SARIF format, so they are available as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports/report.sarif
    
    # Upload archive with all report files (.xml, .html, .sarif).
    - name: Archive reports
      uses: actions/upload-artifact@v2
      with:
        name: Static analysis reports
        path: reports/*.*
